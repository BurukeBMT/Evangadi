Detailed Explanation of script.js
================================

This JavaScript file is designed to answer a series of DOM manipulation and event handling questions, each corresponding to a section in the HTML file. Below is a detailed explanation of what each part of the code does and how it works:

---

**Question 1: Selecting and Displaying an Element**
- The code selects an element with the id `sample1` using `document.getElementById("sample1")`.
- It prints the entire element to the console, which helps verify the correct element is selected.
- It then prints the text content of the element using `.textContent`, showing only the inner text, not the HTML structure.
- This demonstrates basic DOM selection and content retrieval.

**Question 2: Working with Lists and Classes**
- The code selects the `ul` element with id `techCompanies` using both `getElementById` and `querySelector` to show two different selection methods.
- It counts the number of `li` elements (list items) inside `techCompanies` using `querySelectorAll("#techCompanies li")` and prints the count. This shows how to select multiple elements and work with NodeLists.
- It selects all elements with the class `red` using `querySelectorAll(".red")` and prints them. (Note: `getElementsByClassName("red")` could also be used for a live HTMLCollection.)
- The code creates a new `li` element using `document.createElement("li")`, sets its text to "Facebook", and adds the class `blue` with `classList.add("blue")`.
- It appends this new element after the last `li` ("Sony") using `insertAdjacentElement("afterend", newCompany)`, demonstrating how to dynamically add elements to the DOM.
- It counts all elements with the class `blue` and displays the count inside the div with id `blueCompanies` by setting its `textContent`.

**Question 3: Changing Background Color with Events**
- Two functions are defined: `addBackgroundColor` sets the page background to light blue (`#99ecff`), and `removeBackgroundColor` resets it to default.
- The code selects the elements with ids `yesBackground` and `noBackground` (presumably buttons or links) and attaches click event listeners to them.
- When "Yes" is clicked, the background color changes; when "No" is clicked, it is removed. This demonstrates event handling and style manipulation.

**Question 4: Form Handling, Validation, and Output**
- The function `calculateSum` is attached to the form's submit event. It prevents the default form submission to handle the logic in JavaScript.
- It retrieves the values from two input fields, converts them to numbers using `parseFloat`, and checks if both are valid numbers with `isNaN`.
- If either value is not a number, it displays an error message both in the console and under the form.
- If both are numbers, it calculates the sum, prints it to the console, and displays it under the form in the `sum` div.
- This section demonstrates form handling, input validation, and dynamic content updates.

---

**How the Code Works (Summary):**
- Uses DOM selection methods (`getElementById`, `querySelector`, `querySelectorAll`) to interact with HTML elements.
- Manipulates the DOM by creating, updating, and appending elements.
- Handles user events (clicks, form submissions) to trigger JavaScript functions.
- Updates the page dynamically based on user actions and input, providing immediate feedback.
- Uses best practices for event handling, validation, and DOM updates.

This code provides a comprehensive demonstration of essential JavaScript DOM manipulation and event handling techniques, suitable for learning and practicing these core web development skills.
